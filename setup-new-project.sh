#!/bin/bash

# ModelShift AI - New Supabase Project Setup Script
# This script helps you set up a new Supabase project for ModelShift AI

echo "🚀 ModelShift AI - New Supabase Project Setup"
echo "============================================="
echo ""

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo "❌ Error: Supabase CLI is not installed."
    echo "Please install it first: https://supabase.com/docs/guides/cli"
    exit 1
fi

# Step 1: Login to Supabase (if not already logged in)
echo "Step 1: Checking Supabase login status..."
if ! supabase projects list &> /dev/null; then
    echo "Please login to Supabase CLI:"
    supabase login
else
    echo "✅ Already logged in to Supabase"
fi

# Step 2: Create a new project or select existing one
echo ""
echo "Step 2: Supabase Project"
echo "You have two options:"
echo "  1. Create a new Supabase project"
echo "  2. Use an existing Supabase project"
read -p "Enter your choice (1 or 2): " project_choice

if [ "$project_choice" = "1" ]; then
    # Create new project
    echo ""
    echo "Creating a new Supabase project..."
    read -p "Enter a name for your new project: " project_name
    
    echo "Creating project '$project_name'..."
    supabase projects create "$project_name" --org-id $(supabase orgs list --json | jq -r '.[0].id')
    
    # Get the new project ID
    project_id=$(supabase projects list --json | jq -r ".[] | select(.name == \"$project_name\") | .id")
    
    if [ -z "$project_id" ]; then
        echo "❌ Failed to create project or get project ID"
        exit 1
    fi
    
    echo "✅ Created new project: $project_name (ID: $project_id)"
else
    # List existing projects
    echo ""
    echo "Listing your existing Supabase projects:"
    supabase projects list
    
    read -p "Enter the ID of the project you want to use: " project_id
    
    # Verify project exists
    if ! supabase projects list --json | jq -r '.[].id' | grep -q "$project_id"; then
        echo "❌ Project ID not found"
        exit 1
    fi
    
    echo "✅ Selected project ID: $project_id"
fi

# Step 3: Link the project
echo ""
echo "Step 3: Linking Supabase project to local project..."
supabase link --project-ref "$project_id"

# Step 4: Get project details
echo ""
echo "Step 4: Getting project details..."
project_details=$(supabase status)
api_url=$(echo "$project_details" | grep "API URL:" | awk '{print $3}')
anon_key=$(echo "$project_details" | grep "anon key:" | awk '{print $3}')

if [ -z "$api_url" ] || [ -z "$anon_key" ]; then
    echo "❌ Failed to get project details"
    exit 1
fi

echo "✅ Got project details:"
echo "   API URL: $api_url"
echo "   Anon Key: ${anon_key:0:5}...${anon_key: -5}"

# Step 5: Update .env.local file
echo ""
echo "Step 5: Updating .env.local file..."
if [ -f .env.local ]; then
    # Backup existing file
    cp .env.local .env.local.backup
    echo "   Created backup of existing .env.local to .env.local.backup"
fi

cat > .env.local << EOF
# Supabase Configuration for ModelShift AI
# Generated by setup script on $(date)

# Frontend Environment Variables (Safe for client-side)
VITE_SUPABASE_URL=$api_url
VITE_SUPABASE_ANON_KEY=$anon_key

# Optional: Demo Mode (disabled since we're using a real Supabase project)
VITE_DEMO_MODE=false

# Optional: Encryption key for local API key storage
VITE_ENCRYPTION_KEY=modelshift-ai-secure-key-2024

# Development Settings
VITE_APP_ENV=development
EOF

echo "✅ Updated .env.local with new project details"

# Step 6: Run migrations
echo ""
echo "Step 6: Running database migrations..."
supabase db reset

echo ""
echo "✅ Setup complete!"
echo ""
echo "Next steps:"
echo "1. Start your development server: npm run dev"
echo "2. Deploy the Edge Functions: node deploy-edge-functions.cjs"
echo "3. Configure your API keys in the app or in Supabase Edge Function secrets"
echo ""
echo "Happy coding! 🎉"